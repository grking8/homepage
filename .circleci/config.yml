version: 2
jobs:
  bootstrap:
    docker:
      - image: continuumio/miniconda3:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - $EXTERNAL_GITHOST_SSH_FINGERPRINT
      - run:
          name: Download external build scripts and build conda environment
          command: deploy-scripts/bootstrap.sh
      - run:
          name: Create bash profile
          command: |
            python bootstrap/${BOOTSTRAP_REPO}/bash_profile.py
            cp $BASH_ENV bash__profile
      - persist_to_workspace:
          root: .
          paths:
            - bash__profile
            - bootstrap/deploy-scripts

  build:
    docker:
      - image: jekyll/jekyll:3.6
    steps:
      - checkout
      - restore_cache:
          keys:
            - gem-{{ checksum "Gemfile.lock" }}
            - gem
      - attach_workspace:
          at: .
      - run:
          name: Build source files into HTML, CSS, and JS
          command: |
            source bash__profile
            deploy-scripts/build-website.sh
          environment:
            JEKYLL_ENV: production
      - save_cache:
          key: gem-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - persist_to_workspace:
          root: .
          paths:
            - _site

  renew-ssl:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install latest ca-certificates
          command: apk add ca-certificates
      - attach_workspace:
          at: .
      - run:
          name: Get SSL files from certbot to update environment variables
          no_output_timeout: 40m
          command: |
            source bash__profile
            bootstrap/${BOOTSTRAP_REPO}/static-website/ssl/renew-ssl.sh

  create-ssl:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install latest ca-certificates
          command: apk add ca-certificates
      - attach_workspace:
          at: .
      - run:
          name: Create SSL files
          command:
            bootstrap/${BOOTSTRAP_REPO}/static-website/ssl/create-ssl-files.sh
            true
      - persist_to_workspace:
          root: .
          paths:
            - fullchain.pem
            - privkey.pem

  containerise:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: Load environment variables
          command: source bash__profile
      - run:
          name: Build Docker image and push to container registry
          command:
            bootstrap/${BOOTSTRAP_REPO}/static-website/containerise.sh false

  deploy-production:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Load environment variables
          command: source bash__profile
      - run:
          name: Create or update GCP instance and run Docker image
          command: bootstrap/${BOOTSTRAP_REPO}/static-website/gcp/authenticate-create-update-instance.sh

workflows:
  version: 2
  build-ssl-containerise-deploy:
    jobs:
      - bootstrap
      - build:
          requires:
            - bootstrap
      - create-ssl:
          requires:
            - build
      - containerise:
          requires:
            - create-ssl
          filters:
            branches:
              only:
                - master
      - deploy-production:
          requires:
            - containerise
          filters:
            branches:
              only:
                - master
  build-renew-ssl-containerise-deploy:
    triggers:
      - schedule:
          cron: "10 03 26 * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - bootstrap
      - build:
          requires:
            - bootstrap
      - renew-ssl:
          requires:
            - build
      - create-ssl:
          requires:
            - renew-ssl
      - containerise:
          requires:
            - create-ssl
      - deploy-production:
          requires:
            - containerise
